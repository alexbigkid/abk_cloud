{
    "Jest Test File Template": {
        "prefix": "jtf",
        "description": "Jest Test File Template",
        "scope": "javascript,typescript",
        "body": [
            "import { beforeEach, describe, expect, it, jest } from '@jest/globals';",
            "",
            "//-----------------------------------------------------------------------------",
            "// mocks",
            "//-----------------------------------------------------------------------------",
            "jest.mock('../util/system-info', () => ({",
            "  getArch: jest.fn(),",
            "  getOsVersion: jest.fn(),",
            "  getDistribution: jest.fn()",
            "}));",
            "",
            "//-----------------------------------------------------------------------------",
            "// constants",
            "//-----------------------------------------------------------------------------",
            "",
            "describe('${1|Name your test class here|}', () => {",
            "  //---------------------------------------------------------------------------",
            "  // test variables",
            "  //---------------------------------------------------------------------------",
            "",
            "  //---------------------------------------------------------------------------",
            "  // test class setup",
            "  //---------------------------------------------------------------------------",
            "  beforeEach(() => {",
            "    jest.clearAllMocks();",
            "    jest.resetModules();",
            "  });",
            "",
            "  // afterEach(() => {",
            "  // });",
            "",
            "  //---------------------------------------------------------------------------",
            "  // tests",
            "  //---------------------------------------------------------------------------",
            "  it('should add and multiply, given that numbers are numbers', () => {",
            "    // Arrange",
            "    // --------------------------------------------------------------------",
            "    const expected = 89;",
            "",
            "    // Act",
            "    // --------------------------------------------------------------------",
            "    const actual = 10 * 8 + 9;",
            "",
            "    // Assert",
            "    // --------------------------------------------------------------------",
            "    expect(actual).toEqual(expected);",
            "  });",
            "",
            "  const testCases: [string, string, string][] = [",
            "    // str1,  str2,  expected",
            "    ['tst1', 'tst2', 'tst1_tst2'],",
            "    ['tst3', 'tst4', 'tst3_tst4']",
            "  ];",
            "  test.each(testCases)(",
            "    'should do something, given condition',",
            "    (str1: string, str2: string, expected: string) => {",
            "      // Arrange",
            "      // --------------------------------------------------------------------",
            "",
            "      // Act",
            "      // --------------------------------------------------------------------",
            "      const actual = str1 + '_' + str2;",
            "",
            "      // Assert",
            "      // --------------------------------------------------------------------",
            "      expect(actual).toEqual(expected);",
            "    }",
            "  );",
            "});"
        ]
    },
    "Jest Test Simple Template": {
        "prefix": "jts",
        "description": "Jest Test Simple Template",
        "scope": "javascript,typescript",
        "body": [
            "it('should ${1|(do something)|}, given that ${2|(enter condition)|}', () => {",
            "  // Arrange",
            "  // --------------------------------------------------------------------",
            "  const expected = 89;",
            "  $0",
            "",
            "  // Act",
            "  // --------------------------------------------------------------------",
            "  const actual = 10 * 8 + 9;",
            "",
            "  // Assert",
            "  // --------------------------------------------------------------------",
            "  expect(actual).toEqual(expected);",
            "});"
        ]
    },
    "Jest Test Composite Template": {
        "prefix": "jtc",
        "description": "Jest Test Composite Template",
        "scope": "javascript,typescript",
        "body": [
            "const testCases: [string, string, string][] = [",
            "  // str1,  str2,  expected",
            "  ['tst1', 'tst2', 'tst1_tst2'],",
            "  ['tst3', 'tst4', 'tst3_tst4']",
            "];",
            "test.each(testCases)(",
            "  'should ${1|(do something)|}, given that ${2|(enter condition)|}',",
            "  (str1: string, str2: string, expected: string) => {",
            "    // Arrange",
            "    // --------------------------------------------------------------------",
            "    $0",
            "",
            "    // Act",
            "    // --------------------------------------------------------------------",
            "    const actual = str1 + '_' + str2;",
            "",
            "    // Assert",
            "    // --------------------------------------------------------------------",
            "    expect(actual).toEqual(expected);",
            "  }",
            ");"
        ]
    },
    "Jest Test Simple Async Template": {
        "prefix": "jtsa",
        "description": "Jest Test Simple Async Template",
        "scope": "javascript,typescript",
        "body": [
            "it('should ${1|(do something)|}, given that ${2|(enter condition)|}', async () => {",
            "  // Arrange",
            "  // --------------------------------------------------------------------",
            "  const expected = 89;",
            "  $0",
            "",
            "  // Act",
            "  // --------------------------------------------------------------------",
            "  const actual = await ${3|functionName|}();",
            "",
            "  // Assert",
            "  // --------------------------------------------------------------------",
            "  expect(actual).toEqual(expected);",
            "});"
        ]
    },
    "Jest Test Composite Async Template": {
        "prefix": "jtca",
        "description": "Jest Test Composite Async Template",
        "scope": "javascript,typescript",
        "body": [
            "const testCases: [string, string, string][] = [",
            "  // str1,  str2,  expected",
            "  ['tst1', 'tst2', 'tst1_tst2'],",
            "  ['tst3', 'tst4', 'tst3_tst4']",
            "];",
            "test.each(testCases)(",
            "  'should ${1|(do something)|}, given that ${2|(enter condition)|}',",
            "  async (str1: string, str2: string, expected: string) => {",
            "    // Arrange",
            "    // --------------------------------------------------------------------",
            "    $0",
            "",
            "    // Act",
            "    // --------------------------------------------------------------------",
            "    const actual = await ${3|functionName|}(str1, str2);",
            "",
            "    // Assert",
            "    // --------------------------------------------------------------------",
            "    expect(actual).toEqual(expected);",
            "  }",
            ");"
        ]
    },
    "Python Test File Template": {
        "prefix": "ptf",
        "description": "Python Test File Template",
        "scope": "python",
        "body": [
            "\"\"\"Unit tests for ${1|FileName|}.py\"\"\"",
            "",
            "# Standard library imports",
            "import os",
            "import logging",
            "import unittest",
            "from unittest.mock import ANY, MagicMock, call, patch",
            "",
            "# Third party imports",
            "from parameterized import parameterized",
            "",
            "# Own modules imports",
            "",
            "",
            "",
            "logging.basicConfig(format='[%(funcName)s]:[%(levelname)s]: %(message)s')",
            "tst_logger = logging.getLogger(__name__)",
            "log_level = os.environ.get('LOG_LEVEL', 'WARNING').upper()",
            "tst_logger.setLevel(logging.getLevelName(log_level))",
            "",
            "",
            "# -----------------------------------------------------------------------------",
            "# class for testing $1 main functionality",
            "# -----------------------------------------------------------------------------",
            "class Test${1}(unittest.TestCase):",
            "    \"\"\"Test for $1\"\"\"",
            "",
            "    @classmethod",
            "    def setUpClass(cls):",
            "        logging.disable(logging.CRITICAL) # disables logging",
            "        # logging.disable(logging.NOTSET) # enables logging",
            "",
            "    @classmethod",
            "    def tearDownClass(cls):",
            "        logging.disable(logging.NOTSET)",
            "",
            "",
            "    def setUp(self) -> None:",
            "        self.maxDiff = None",
            "        return super().setUp()",
            "",
            "",
            "    # -------------------------------------------------------------------------",
            "    # Tests simple case",
            "    # -------------------------------------------------------------------------",
            "    def test_simple_case(self) -> None:",
            "        \"\"\"Validates simple behavior\"\"\"",
            "        # Arrange",
            "        # ---------------------------------------------------------------------",
            "        expected = 89",
            "        $0",
            "",
            "        # Act",
            "        # ---------------------------------------------------------------------",
            "        actual = 10 * 8 + 9",
            "",
            "        # Assert",
            "        # ---------------------------------------------------------------------",
            "        self.assertEqual(actual, expected, f'Unexpected result: {actual}')",
            "",
            "",
            "    # -------------------------------------------------------------------------",
            "    # Tests composite case",
            "    # -------------------------------------------------------------------------",
            "    @parameterized.expand([",
            "        # str1,  str2,   expected",
            "        ['tst1', 'tst2', 'tst1_tst2'],",
            "        ['tst3', 'tst4', 'tst3_tst4'],",
            "    ])",
            "    def test_composite_case(self, str1:str, str2:str, expected:str) -> None:",
            "        \"\"\"Validates all cases\"\"\"",
            "        # Arrange",
            "        # ---------------------------------------------------------------------",
            "",
            "        # Act",
            "        # ---------------------------------------------------------------------",
            "        actual = f'{str1}_{str2}'",
            "",
            "        # Assert",
            "        # ---------------------------------------------------------------------",
            "        self.assertEqual(actual, expected, f'Unexpected result: {actual}')",
            "",
            "",
            "",
            "if __name__ == '__main__':",
            "    unittest.main()",
            ""
        ]
    },
    "Python Test Composite Template": {
        "prefix": "ptc",
        "description": "Python Test Composite Template",
        "scope": "python",
        "body": [
            "@parameterized.expand([",
            "    # str1,  str2,   expected",
            "    ['tst1', 'tst2', 'tst1_tst2'],",
            "    ['tst3', 'tst4', 'tst3_tst4'],",
            "])",
            "def test_${1|does_something|}__given_${2|condition|}(self, str1:str, str2:str, expected:str) -> None:",
            "    \"\"\"Validates all cases\"\"\"",
            "    # Arrange",
            "    # -------------------------------------------------------------------------",
            "    $0",
            "",
            "    # Act",
            "    # -------------------------------------------------------------------------",
            "    actual = f'{str1}_{str2}'",
            "",
            "    # Assert",
            "    # -------------------------------------------------------------------------",
            "    self.assertEqual(actual, expected, f'Unexpected result: {actual}')",
            "",
            ""
        ]
    },
    "Python Test Simple Template": {
        "prefix": "pts",
        "description": "Python Test Simple Template",
        "scope": "python",
        "body": [
            "def test_${1|does_something|}__given_${2|condition|}(self) -> None:",
            "    \"\"\"Validates simple behavior\"\"\"",
            "    # Arrange",
            "    # -------------------------------------------------------------------------",
            "    expected = 89",
            "    $0",
            "",
            "    # Act",
            "    # -------------------------------------------------------------------------",
            "    actual = 10 * 8 + 9",
            "",
            "    # Assert",
            "    # -------------------------------------------------------------------------",
            "    self.assertEqual(actual, expected, f'Unexpected result: {actual}')",
            "",
            ""
        ]
    }
}
